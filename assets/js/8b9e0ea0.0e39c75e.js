"use strict";(self.webpackChunkoc_studio_docs=self.webpackChunkoc_studio_docs||[]).push([[3045],{807:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"development/knowledgebase","title":"Integrations with a Knowledgebase","description":"A knowledgebase service can be used when your NLU is unable to match to one of your known intents and returns an input unknown.  This gives then gives another opportunity to respond to the user with something from your knowledgebase.","source":"@site/docs/development/knowledgebase.md","sourceDirName":"development","slug":"/development/knowledgebase","permalink":"/docs/development/knowledgebase","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Integrations with a Knowledgebase","sidebar_label":"Knowledgebase Integration"},"sidebar":"docs","previous":{"title":"NLU","permalink":"/docs/development/nlu"},"next":{"title":"Running Locally","permalink":"/docs/development/running-locally"}}');var s=t(4848),r=t(8453);const i={title:"Integrations with a Knowledgebase",sidebar_label:"Knowledgebase Integration"},a=void 0,d={},l=[{value:"OC Studio&#39;s Knowledgebase",id:"oc-studios-knowledgebase",level:2},{value:"Kendra",id:"kendra",level:2},{value:"Handler Configuration",id:"handler-configuration",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"A knowledgebase service can be used when your NLU is unable to match to one of your known intents and returns an input unknown.  This gives then gives another opportunity to respond to the user with something from your knowledgebase."}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Assistant()"})," builder has a method ",(0,s.jsx)(n.code,{children:"withKnowledgeBaseService()"})," that accepts an object that implements the ",(0,s.jsx)(n.code,{children:"KnowledgeBaseService"})," and which intent should be used to then query the service with."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'    const assistant = new Assistant()\n        .withKnowledgeBaseService(studioService, {\n            // Intent ID for your fallback to determine if we call  KnowledgeBase\n            matchIntentId: "InputUnknown",\n            // For KnowledgeBase results we will generate a request with the following ID\n            setIntentId: "OCSearch"\n        })\n'})}),"\n",(0,s.jsx)(n.p,{children:"You can write your own KnowledgeBaseService or leverage some of our service we provide below."}),"\n",(0,s.jsx)(n.h2,{id:"oc-studios-knowledgebase",children:"OC Studio's Knowledgebase"}),"\n",(0,s.jsx)(n.p,{children:"OC Studio has built-in knowledgebase features to search your crawled documents and your FAQs."}),"\n",(0,s.jsxs)(n.p,{children:["The StudioService, which can be used to query all of Studio's runtime APIs, implements the necessary ",(0,s.jsx)(n.code,{children:"KnowledgebaseService"})," interface that is required to pass to the ",(0,s.jsx)(n.code,{children:"Assistant()"})," builder."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { StudioService } from "stentor-service-studio";\n\n//... the rest of your imports\n\n// Create your StudioService\nconst studioService: StudioService = new StudioService({ appId: process.env.STUDIO_APP_ID, token: process.env.STUDIO_TOKEN });\n\n\nconst assistant = new Assistant()\n\n    // Add this following to your builder\n    .withKnowledgeBaseService(studioService, {\n        // Intent ID for your fallback to determine if we call  KnowledgeBase\n        matchIntentId: "InputUnknown",\n        // For KnowledgeBase results we will generate a request with the following ID\n        setIntentId: "OCSearch"\n    })\n    // ... remaining functions\n    .lambda();\n'})}),"\n",(0,s.jsx)(n.h2,{id:"kendra",children:"Kendra"}),"\n",(0,s.jsx)(n.p,{children:"Lex & Lex V2 both support native integrations with Amazon Kendra through the AMAZON.KendraSearchIntent, you can also call Kendra independently."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'\nimport { KendraService } from "@xapp/stentor-service-kendra";\n\nconst kendraService: KendraService = new KendraService();\n\n// Return the handler for running in an AWS Lambda function.\nconst assistant = new Assistant()\n    .withKnowledgeBaseService(kendraService, {\n        // Intent ID for your fallback to determine if we call  KnowledgeBase\n        matchIntentId: "InputUnknown",\n        // For KnowledgeBase results we will generate a request with the following ID\n        setIntentId: "OCSearch"\n    })\n'})}),"\n",(0,s.jsx)(n.h2,{id:"handler-configuration",children:"Handler Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["In the above examples, the configuration requires a ",(0,s.jsx)(n.code,{children:"setIntentId"})," field, which is the handler that can receive requests with knowledge base information."]}),"\n",(0,s.jsxs)(n.p,{children:["You can leverage our ",(0,s.jsx)(n.a,{href:"https://github.com/xapp-ai/question-answering-handler",children:"Question Answering Handler"}),", either by itself or through extending it."]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var o=t(6540);const s={},r=o.createContext(s);function i(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);