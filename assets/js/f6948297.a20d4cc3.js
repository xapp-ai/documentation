"use strict";(self.webpackChunkoc_studio_docs=self.webpackChunkoc_studio_docs||[]).push([[8810],{4441:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>h,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"model/slots","title":"Slots","description":"What is a slot?","source":"@site/docs/model/slots.mdx","sourceDirName":"model","slug":"/model/slots","permalink":"/docs/model/slots","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Slots","sidebar_label":"Slots"},"sidebar":"docs","previous":{"title":"Intents","permalink":"/docs/model/intents"},"next":{"title":"Entity","permalink":"/docs/model/entities"}}');var i=s(4848),o=s(8453),a=s(3074);const r={title:"Slots",sidebar_label:"Slots"},l=void 0,h={},c=[{value:"What is a slot?",id:"what-is-a-slot",level:2},{value:"When to use a slot?",id:"when-to-use-a-slot",level:2},{value:"Adding Slots to an Intent",id:"adding-slots-to-an-intent",level:2},{value:"List Slot Example",id:"list-slot-example",level:3},{value:"Multiple Slots without List Example",id:"multiple-slots-without-list-example",level:3},{value:"Slot Best Practices",id:"slot-best-practices",level:2},{value:"External References",id:"external-references",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"what-is-a-slot",children:"What is a slot?"}),"\n",(0,i.jsx)(t.p,{children:"Think of slots as the data within the utterance of the intent that you want to capture. You have one or many slots per utterance and not all sample utterances need to include all the slots define in the intent."}),"\n",(0,i.jsx)(t.p,{children:"Slots then have an entity (sometimes referred to as a slot type) associated with it. The entity can be either custom lists or some type of structured/semi-structured data like numbers, dates (both relative and absolute) and addresses. NLUs provide both built in lists style entities and the structured style of dates."}),"\n",(0,i.jsx)(t.h2,{id:"when-to-use-a-slot",children:"When to use a slot?"}),"\n",(0,i.jsx)(t.p,{children:"The primary reason for using a slot is when there is information you want to capture from a user to then use within your application. For example when scheduling an appointment you want to include the date you have availability or when you are requesting to listen to a radio station you want to capture the requested station."}),"\n",(0,i.jsx)(t.p,{children:"Beyond information capture, slots can be used to more precisely understand what the user is saying. Capturing negative modifiers and prepositions in slots can help with precision in your model. This additional context can help you provide your user with better responses and can sometimes be the difference between correct and incorrect responses."}),"\n",(0,i.jsx)(t.p,{children:'Additionally, slots can help you greatly increase the amount of possible matches for an intent by turning common carrier phrases into a slot. Carrier phrases don\'t include the important information, like the entity value, but are added to help communicate intent and can vary significantly. For example, for an intent that searches for recipes carrier phrases include: "find", "give me", "search for". Putthing these into a custom list entity and then leveraged as a slot increases your model\'s ability to match to a user\'s utterance and allows you to reuse them in other intents however there is some risk of causing problems with utterance ambiguity in the model.'}),"\n",(0,i.jsx)(t.p,{children:"In summary, when to use slots:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Data Capture"})," Capture data from the user such as dates or entity values"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Increase Precision"})," Capture information adjacent to the data to better understand the user's request"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Define More Matches"})," Put carrier phrases in a slot to define more matches without more sample utterances"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"adding-slots-to-an-intent",children:"Adding Slots to an Intent"}),"\n",(0,i.jsxs)(t.p,{children:["In order to add a slot to an intent, you first need to add the slot to the utterance pattern with ",(0,i.jsx)(t.code,{children:"${slot_name}"})," and you then need to associate it with an entity (or slot type)."]}),"\n",(0,i.jsx)(t.p,{children:"For naming the slot, we recommend to use lowercase letters only and use underscores instead of spaces."}),"\n",(0,i.jsx)(t.p,{children:"When attempting to capture more than one value of the same entity, it feels natural to have two slots with the same name and type however this is not allowed.  Instead either use a list slot type, which captures more than one or postfix the second slot with a number."}),"\n",(0,i.jsx)(t.h3,{id:"list-slot-example",children:"List Slot Example"}),"\n",(0,i.jsx)(t.p,{children:"Lists make it easier to capture one to many of a entity.  Ingredients are a great example:"}),"\n",(0,i.jsx)(a.q,{owner:"mine",hasTail:!0,children:(0,i.jsx)(t.p,{children:"i'm looking for a recipe with strawberries, blueberries, and kiwi"})}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(t.p,{children:"Can be entered as:"}),"\n",(0,i.jsxs)(a.q,{owner:"mine",hasTail:!0,children:["i'm looking for a recipe with ",(0,i.jsx)("b",{children:"${ingredients}"})]}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsxs)(t.p,{children:["Where ",(0,i.jsx)(t.code,{children:"${ingredients}"})," is a custom slot with a list of possible ingredients."]}),"\n",(0,i.jsx)(t.h3,{id:"multiple-slots-without-list-example",children:"Multiple Slots without List Example"}),"\n",(0,i.jsx)(t.p,{children:"When there is a known number of items of the same entity, you may instead want to just postfix the slot name."}),"\n",(0,i.jsx)(a.q,{owner:"mine",hasTail:!0,children:(0,i.jsx)(t.p,{children:"play the UVA vs Virginia Tech game"})}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(t.p,{children:"Can be entered as:"}),"\n",(0,i.jsx)(a.q,{owner:"mine",hasTail:!0,children:(0,i.jsxs)(t.p,{children:["play the ",(0,i.jsx)("b",{children:"${team}"})," vs ",(0,i.jsx)("b",{children:"${team_two}"})]})}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsxs)(t.p,{children:["Where ",(0,i.jsx)(t.code,{children:"${team}"})," and ",(0,i.jsx)(t.code,{children:"${team_two}"})," both have the same entity value which is a list of teams."]}),"\n",(0,i.jsx)(t.h2,{id:"slot-best-practices",children:"Slot Best Practices"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Naming Convention"})," We recommend to use lowercase, underscores instead of spaces, letters only. For example: ",(0,i.jsx)(t.code,{children:"name"})," or ",(0,i.jsx)(t.code,{children:"ingredient_one"}),". This tends to work the best across all the currently available NLUs."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Same Name Across Intents"})," It is highly recommended to keep the same name across intents for a slot that has the same type. This makes it much easier to use multiple intents for a given state (or handler)"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Slot Only Intents"})," Instead of adding a sample utterance with just the slot value, create a new intent with this single sample to allow for better reuse and higher precision."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"external-references",children:"External References"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://docs.aws.amazon.com/lex/latest/dg/howitworks-builtins-slots.html",children:"Amazon Lex - Built-in Slot Types"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://developer.amazon.com/en-US/docs/alexa/custom-skills/slot-type-reference.html",children:"Amazon Alexa - Slot Type Reference"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://cloud.google.com/dialogflow/es/docs/reference/system-entities",children:"Dialogflow ES - System entities reference"})}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},3074:(e,t,s)=>{s.d(t,{q:()=>o});var n=s(6540);function i(e){return"others"===e?"m 80 0 v 240 h -60 c 40 -40 60 -160 60 -240":"m 0 0 v 240 h 60 c -40 -40 -60 -160 -60 -240"}var o=function(e){return n.createElement("div",{className:"chat-text-bubble "+("mine"===e.owner?"chat-text-bubble--mine":"chat-text-bubble--others")},e.hasTail&&(t=e.owner,n.createElement("svg",{className:"chat-text-bubble__tail",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 80 240"},n.createElement("path",{d:i(t),fill:"currentColor"}))),e.children);var t}},8453:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>r});var n=s(6540);const i={},o=n.createContext(i);function a(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);