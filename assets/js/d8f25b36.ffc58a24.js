"use strict";(self.webpackChunkoc_studio_docs=self.webpackChunkoc_studio_docs||[]).push([[9985],{5940:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>c,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"model/input-context","title":"Input Context","description":"Input contexts help the NLU know which intent or intents to expect from the user based on the response that was just sent to the user.  The input contexts are set on the intent and then on the response that is communicated to the user.","source":"@site/docs/model/input-context.mdx","sourceDirName":"model","slug":"/model/input-context","permalink":"/docs/model/input-context","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Input Context"},"sidebar":"docs","previous":{"title":"Entity","permalink":"/docs/model/entities"},"next":{"title":"Best Practices","permalink":"/docs/model/model-best-practices"}}');var i=n(4848),s=n(8453),r=n(3074);const c={title:"Input Context"},a=void 0,d={},l=[{value:"Input Context Parameters on Responses",id:"input-context-parameters-on-responses",level:2},{value:"How to Set the Input Context in Studio",id:"how-to-set-the-input-context-in-studio",level:2},{value:"How to Set the Input Context in Stentor SDK",id:"how-to-set-the-input-context-in-stentor-sdk",level:2},{value:"Read More",id:"read-more",level:2}];function h(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"Input contexts help the NLU know which intent or intents to expect from the user based on the response that was just sent to the user.  The input contexts are set on the intent and then on the response that is communicated to the user."}),"\n",(0,i.jsx)(t.p,{children:"For example, you are asking the user for the zip code."}),"\n",(0,i.jsx)(r.q,{owner:"others",hasTail:!0,children:(0,i.jsx)(t.p,{children:"May I have your zip code?"})}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(t.p,{children:"Most likely, they will respond with either their zip code:"}),"\n",(0,i.jsx)(r.q,{owner:"mine",hasTail:!0,children:(0,i.jsx)(t.p,{children:"20500"})}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(t.p,{children:"Or something slightly more verbose:"}),"\n",(0,i.jsx)(r.q,{owner:"mine",hasTail:!0,children:(0,i.jsx)(t.p,{children:"my zip code is 20500"})}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsxs)(t.p,{children:["You have two intents in your model to cover the above to utterances, one is a generic number only input intent for handling all numbers and another is specific to zip codes.  Unfortunately when you are testing you notice that due to some ",(0,i.jsx)(t.a,{href:"/docs/model/model-best-practices#be-careful-of-ambiguity",children:"ambiguity"})," certain zip codes are being confused as telephone numbers and in some cases the NLU thinks you are communicating a street address.  To solve this, you want to leverage input context.  Since you are asking for the zip, most likely the user is returning their zip code and input contexts are the way we let the NLU know we are expecting the zip code."]}),"\n",(0,i.jsxs)(t.p,{children:["Since zip code can go to your number only intent and your zip code intent, you will want to set an input context on each.  Since the number only intent can be used as an input for many questions, use a ",(0,i.jsx)(t.code,{children:"expecting_number"})," input context.  For the zip code intent, you can use either ",(0,i.jsx)(t.code,{children:"expecting_address"})," or ",(0,i.jsx)(t.code,{children:"expecting_zip"}),", it depends on the rest of your model.  Then on the response for ",(0,i.jsx)(t.code,{children:"May I have your zip code?"})," you add both contexts ",(0,i.jsx)(t.code,{children:"expecing_number"})," and ",(0,i.jsx)(t.code,{children:"expecting_address"}),".  These are then passsed through to the NLU for you and the NLU will use them on the users next input."]}),"\n",(0,i.jsx)(t.admonition,{type:"important",children:(0,i.jsx)(t.p,{children:"NLUs will treat input context slightly different.  Google Cloud Dialogflow ES for example will use it to prefer certain intents but they will always be available however on Amazon Lex intents with context will only be returned if you tell the NLU to expect it."})}),"\n",(0,i.jsx)(t.h2,{id:"input-context-parameters-on-responses",children:"Input Context Parameters on Responses"}),"\n",(0,i.jsxs)(t.p,{children:["In addition to the required name, such as ",(0,i.jsx)(t.code,{children:"expecting_number"}),", you can set two parameters to let the NLU know how long to keep the context active."]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"turnsToLive"})," - The number of conversation turns to keep the context alive.  Minimum value of 1 and a maximum value of 20"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"timeToLiveInSeconds"})," - The number of seconds the context should be active after the initial"]}),"\n"]}),"\n",(0,i.jsx)(t.admonition,{type:"important",children:(0,i.jsxs)(t.p,{children:["For Amazon Lex, one of the two above fields is required.  On Dialogflow ES, only ",(0,i.jsx)(t.code,{children:"turnsToLive"})," is supported."]})}),"\n",(0,i.jsx)(t.h2,{id:"how-to-set-the-input-context-in-studio",children:"How to Set the Input Context in Studio"}),"\n",(0,i.jsxs)(t.p,{children:["First, on the intent you set an input context.  The name of the context must only contain letters and underscores.  We recommend prefixing with ",(0,i.jsx)(t.code,{children:"expecting_"})," and then the type of information you are gathering.  For example:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"expecting_name\n"})}),"\n",(0,i.jsx)(t.p,{children:"or"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"expecting_email\n"})}),"\n",(0,i.jsx)(t.p,{children:"You will find the contexts at the bottom of the intent configuration view."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"address intent",src:n(6407).A+"",width:"1064",height:"844"})}),"\n",(0,i.jsxs)(t.p,{children:["In the above intent, the input context of ",(0,i.jsx)(t.code,{children:"expecting_address"})," is set."]}),"\n",(0,i.jsx)(t.p,{children:"Then, within a handler's content on your response that asks the user for their address."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"response active context",src:n(5388).A+"",width:"888",height:"247"})}),"\n",(0,i.jsxs)(t.p,{children:["Click the ",(0,i.jsx)(t.code,{children:"+"}),' button next to the "Add Reprompt" button and select "Active Contexts".  Make sure this matches exactly with what you added to the intent.']}),"\n",(0,i.jsx)(t.admonition,{type:"important",children:(0,i.jsxs)(t.p,{children:["By default, Studio will set the ",(0,i.jsx)(t.code,{children:"turnsToLive"})," to be 2 and the ",(0,i.jsx)(t.code,{children:"timeToLiveInSeconds"})," to be 400.  These can be modified by editing the JSON on the handler's response."]})}),"\n",(0,i.jsx)(t.h2,{id:"how-to-set-the-input-context-in-stentor-sdk",children:"How to Set the Input Context in Stentor SDK"}),"\n",(0,i.jsxs)(t.p,{children:["The response builder class has a method, ",(0,i.jsx)(t.code,{children:"withActiveContext"})," that allows you to set the context:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:'const response = new ResponseBuilder({ device })\n    .say("May I have your zip code?")\n    .withActiveContext({ name: "expecting_zip", timeToLive: { turnsToLive: 1 } })\n    .build();\n'})}),"\n",(0,i.jsx)(t.p,{children:"You can set multiple contexts by calling the method multiple times:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:'const response = new ResponseBuilder({ device })\n    .say("May I have your zip code?")\n    .withActiveContext({ name: "expecting_zip", timeToLive: { turnsToLive: 1 } })\n    .withActiveContext({ name: "expecting_number", timeToLive: { turnsToLive: 1 } })\n    .build();\n'})}),"\n",(0,i.jsxs)(t.p,{children:["You can also leverage ",(0,i.jsx)(t.code,{children:"timeToLiveInSeconds"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:'const response = new ResponseBuilder({ device })\n    .say("May I have your zip code?")\n    .withActiveContext({ name: "expecting_zip", timeToLive: { timeToLiveInSeconds: 30 } })\n    .build();\n'})}),"\n",(0,i.jsx)(t.h2,{id:"read-more",children:"Read More"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://docs.aws.amazon.com/lex/latest/dg/API_runtime_ActiveContextTimeToLive.html",children:"Amazon Lex - Technical - timeToLiveInSeconds & turnsToLive"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://docs.aws.amazon.com/lexv2/latest/dg/context-mgmt-active-context.html#context-input",children:"Amazon Lex V2 - Input Context"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt-active-context.html#context-input",children:"Amazon Lex V1 - Input Context"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://cloud.google.com/dialogflow/es/docs/contexts-input-output#input_contexts",children:"Dialogflow ES"})}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},3074:(e,t,n)=>{n.d(t,{q:()=>s});var o=n(6540);function i(e){return"others"===e?"m 80 0 v 240 h -60 c 40 -40 60 -160 60 -240":"m 0 0 v 240 h 60 c -40 -40 -60 -160 -60 -240"}var s=function(e){return o.createElement("div",{className:"chat-text-bubble "+("mine"===e.owner?"chat-text-bubble--mine":"chat-text-bubble--others")},e.hasTail&&(t=e.owner,o.createElement("svg",{className:"chat-text-bubble__tail",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 80 240"},o.createElement("path",{d:i(t),fill:"currentColor"}))),e.children);var t}},5388:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/response-active-context-3150233e6529b0d8270b7400d51325ba.png"},6407:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/address-intent-bd2b8d3182df8541b37ec143b3ce36b4.png"},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>c});var o=n(6540);const i={},s=o.createContext(i);function r(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);