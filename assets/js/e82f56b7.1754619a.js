"use strict";(self.webpackChunkoc_studio_docs=self.webpackChunkoc_studio_docs||[]).push([[324],{9221:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return a},default:function(){return h},frontMatter:function(){return o},metadata:function(){return r},toc:function(){return l}});var i=t(5893),s=t(1151);const o={title:"CMS API"},a=void 0,r={id:"development/api/cms",title:"CMS API",description:"The CMS API has both RESTful components and a GraphQL endpoint.  It is the main source of content and events push for your assistant application and allows you to programmatically CRUD intents, handlers, and entities for a specific application.",source:"@site/docs/development/api/cms.md",sourceDirName:"development/api",slug:"/development/api/cms",permalink:"/docs/development/api/cms",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"CMS API"}},c={},l=[{value:"Authorization",id:"authorization",level:2},{value:"Organization Level Token",id:"organization-level-token",level:3},{value:"Headers",id:"headers",level:2},{value:"Handler Content",id:"handler-content",level:2},{value:"GET /cms/handler",id:"get-cmshandler",level:3},{value:"GET /cms/handler/{id}",id:"get-cmshandlerid",level:3},{value:"App Content",id:"app-content",level:2},{value:"GET /cms/app",id:"get-cmsapp",level:3},{value:"Entity Content",id:"entity-content",level:2},{value:"GET /cms/entity",id:"get-cmsentity",level:3},{value:"GET /cms/entity/{entityId}",id:"get-cmsentityentityid",level:3},{value:"Search",id:"search",level:2},{value:"GET /cms/search",id:"get-cmssearch",level:3},{value:"Optional Filter Location ID",id:"optional-filter-location-id",level:4},{value:"GET /cms/rag",id:"get-cmsrag",level:2},{value:"GET /cms/faq/query",id:"get-cmsfaqquery",level:3},{value:"Events",id:"events",level:2},{value:"PUT /cms/app/events",id:"put-cmsappevents",level:3},{value:"Suggestions",id:"suggestions",level:2},{value:"GET /cms/suggestions",id:"get-cmssuggestions",level:3},{value:"GraphQL",id:"graphql",level:2},{value:"POST /cms/graphql",id:"post-cmsgraphql",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"The CMS API has both RESTful components and a GraphQL endpoint.  It is the main source of content and events push for your assistant application and allows you to programmatically CRUD intents, handlers, and entities for a specific application."}),"\n",(0,i.jsxs)(n.p,{children:["The base URL for OC Studio is ",(0,i.jsx)(n.a,{href:"https://api.xapp.ai",children:"https://api.xapp.ai"})," but this will depend on your environment, for example if you have a single tenant instance."]}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://app.getpostman.com/run-collection/3454397-e7916289-8f94-4c96-89bf-cef081d50205?action=collection%2Ffork&collection-url=entityId%3D3454397-e7916289-8f94-4c96-89bf-cef081d50205%26entityType%3Dcollection%26workspaceId%3Daf98e5eb-4de7-4539-b698-06cc23716e64",children:(0,i.jsx)(n.img,{src:"https://run.pstmn.io/button.svg",alt:"Run in Postman"})})}),(0,i.jsx)(n.p,{children:"We have all the requests documented on Postman if you want to test them out.  You will need to generate a token for your application and add that as a variable along with the appId.  If you are using a single-tenant version, you will need to update your API."})]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["You can see a full implementation of this API in the source for the ",(0,i.jsx)(n.a,{href:"https://github.com/stentorium/stentor/blob/master/packages/stentor-service-studio/src/StudioService.ts",children:"Studio Service"})]})}),"\n",(0,i.jsx)(n.h2,{id:"authorization",children:"Authorization"}),"\n",(0,i.jsx)(n.p,{children:"Authorization is required to access data from this endpoint.  A token can be generated from within Studio under Application --\x3e Developer --\x3e Tokens."}),"\n",(0,i.jsx)(n.p,{children:"Generate a new token and append it as a header on each request in the form:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Authorize | Bearer {token}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"organization-level-token",children:"Organization Level Token"}),"\n",(0,i.jsxs)(n.p,{children:["For situations where you are serving multiple apps from the same organization from the same runtime environment, you can use an organization token.  If you use this you can specify on the Handler content endpoints the appId you are requesting by appending the query parameter ",(0,i.jsx)(n.code,{children:"?appId={appId}"})]}),"\n",(0,i.jsx)(n.h2,{id:"headers",children:"Headers"}),"\n",(0,i.jsxs)(n.p,{children:["You will need to use the ",(0,i.jsx)(n.code,{children:"Authorize"})," header and ",(0,i.jsx)(n.code,{children:"Content-Type | application-json"})," header."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'        fetch(url, {\n            method: "GET",\n            headers: {\n                "Content-Type": "application/json",\n                Authorization: `Bearer ${this.token}`\n            }\n        })\n'})}),"\n",(0,i.jsx)(n.h2,{id:"handler-content",children:"Handler Content"}),"\n",(0,i.jsxs)(n.p,{children:["At runtime, the ",(0,i.jsx)(n.a,{href:"../../content/handlers",children:"handler"})," contains information about how to respond to certain incoming requests."]}),"\n",(0,i.jsx)(n.h3,{id:"get-cmshandler",children:"GET /cms/handler"}),"\n",(0,i.jsx)(n.p,{children:"Get a list of all available handlers."}),"\n",(0,i.jsx)(n.h3,{id:"get-cmshandlerid",children:"GET /cms/handler/{id}"}),"\n",(0,i.jsx)(n.p,{children:"Get a specific handler by ID."}),"\n",(0,i.jsx)(n.h2,{id:"app-content",children:"App Content"}),"\n",(0,i.jsx)(n.h3,{id:"get-cmsapp",children:"GET /cms/app"}),"\n",(0,i.jsx)(n.p,{children:"Get information about the app."}),"\n",(0,i.jsx)(n.h2,{id:"entity-content",children:"Entity Content"}),"\n",(0,i.jsx)(n.h3,{id:"get-cmsentity",children:"GET /cms/entity"}),"\n",(0,i.jsx)(n.p,{children:"Get a list of entities."}),"\n",(0,i.jsx)(n.h3,{id:"get-cmsentityentityid",children:"GET /cms/entity/{entityId}"}),"\n",(0,i.jsx)(n.p,{children:"Get a specific entity."}),"\n",(0,i.jsx)(n.h2,{id:"search",children:"Search"}),"\n",(0,i.jsx)(n.h3,{id:"get-cmssearch",children:"GET /cms/search"}),"\n",(0,i.jsxs)(n.p,{children:["Search for provided text through query string ",(0,i.jsx)(n.code,{children:'?question="{text}"'}),", for example ",(0,i.jsx)(n.code,{children:'/cms/search/question="my query"'}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"optional-filter-location-id",children:"Optional Filter Location ID"}),"\n",(0,i.jsxs)(n.p,{children:["Add an optional query parameter ",(0,i.jsx)(n.code,{children:"locationId"})," to filter by a specific location.  In order to use this, you must have documents with this field set."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'?question="{text}"&locationId="{locationId}"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"get-cmsrag",children:"GET /cms/rag"}),"\n",(0,i.jsx)(n.h3,{id:"get-cmsfaqquery",children:"GET /cms/faq/query"}),"\n",(0,i.jsx)(n.p,{children:"Search within FAQs."}),"\n",(0,i.jsx)(n.h2,{id:"events",children:"Events"}),"\n",(0,i.jsx)(n.h3,{id:"put-cmsappevents",children:"PUT /cms/app/events"}),"\n",(0,i.jsx)(n.p,{children:"Put runtime events to your assistant application."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/docs/development/api/runtime-events",children:"Read More"})})}),"\n",(0,i.jsx)(n.h2,{id:"suggestions",children:"Suggestions"}),"\n",(0,i.jsx)(n.h3,{id:"get-cmssuggestions",children:"GET /cms/suggestions"}),"\n",(0,i.jsxs)(n.p,{children:["Get autocomplete suggestions, you must provide query parameters ",(0,i.jsx)(n.code,{children:"key="})," and ",(0,i.jsx)(n.code,{children:"queryText="}),".  Key is from the respective channel the suggestions are being served from.  Additionally, you can filter by types, ",(0,i.jsx)(n.code,{children:"type=INTENT,FAQ"})," will just return model and FAQ based suggestions while omitting HISTORICAL.  Excluding ",(0,i.jsx)(n.code,{children:"type="})," defaults to returning all three."]}),"\n",(0,i.jsx)(n.h2,{id:"graphql",children:"GraphQL"}),"\n",(0,i.jsx)(n.h3,{id:"post-cmsgraphql",children:"POST /cms/graphql"}),"\n",(0,i.jsxs)(n.p,{children:["An identical API with our dedicated ",(0,i.jsx)(n.a,{href:"/docs/development/api/graphql",children:"GraphQL"})," endpoint, the one found at ",(0,i.jsx)(n.code,{children:"/cms/graphql"})," expect with more limited access.  Since the token used for authentication only allows you access to a specific application, you are only allowed to CRUD (create, read, update, delete) intents, handlers, & entities."]}),"\n",(0,i.jsx)(n.p,{children:"This endpoint is meant for programmatic management of your models within Studio.  For example you can update a list of entities based on an external catalog of data at regular intervals or based on modifications to the catalog."})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1151:function(e,n,t){t.d(n,{Z:function(){return r},a:function(){return a}});var i=t(7294);const s={},o=i.createContext(s);function a(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);