"use strict";(self.webpackChunkoc_studio_docs=self.webpackChunkoc_studio_docs||[]).push([[8098],{4944:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"development/api","title":"API","description":"OC Studio provides two primary APIs:","source":"@site/docs/development/api.md","sourceDirName":"development","slug":"/development/api","permalink":"/docs/development/api","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"API"},"sidebar":"docs","previous":{"title":"CLI","permalink":"/docs/development/cli"},"next":{"title":"Crawler CLI","permalink":"/docs/development/arachne-cli"}}');var o=t(4848),i=t(8453);const r={title:"API"},a=void 0,c={},d=[{value:"GraphQL",id:"graphql",level:2},{value:"CMS",id:"cms",level:2}];function l(e){const n={a:"a",h2:"h2",p:"p",strong:"strong",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"OC Studio provides two primary APIs:"}),"\n",(0,o.jsx)(n.h2,{id:"graphql",children:"GraphQL"}),"\n",(0,o.jsxs)(n.p,{children:["This API is primarily used by Studio's web application and CLI.  You can access the graphical user interface at /graphql.  There you will find documentation and a method to run commands.  This is a ",(0,o.jsx)(n.a,{href:"https://graphql.org/",children:"GraphQL"})," based API which, through a single endpoint, allows queries and mutations through a query language.  You can access Studio's GraphQL UI ",(0,o.jsx)(n.a,{href:"https://studio.xapp.ai/graphql",children:"here"}),"."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.a,{href:"/docs/development/api/graphql",children:"Read More"})})}),"\n",(0,o.jsx)(n.h2,{id:"cms",children:"CMS"}),"\n",(0,o.jsx)(n.p,{children:"This API is used by the application's runtime environment to query content and also post events.  It provides end points for handler, entity, search, suggestions, and FAQ content."}),"\n",(0,o.jsx)(n.p,{children:"It also has a more limited version of the GraphQL API that allows you to CRUD entities, intents, handlers for a specific  It is meant for machine to machine communication and leverages a long-lived access token, which you can generate in Studio."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.a,{href:"/docs/development/api/cms",children:"Read More"})})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(6540);const o={},i=s.createContext(o);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);